# GoReleaser configuration for QuikGit
version: 2

# Project metadata
project_name: quikgit

# Environment variables to set for the build
env:
  - GO111MODULE=on
  - CGO_ENABLED=0

# Git settings
git:
  tag_sort: -version:refname

# Before hooks - run before the release starts
before:
  hooks:
    - go mod tidy
    - go mod download
    - go generate ./...

# Build configuration
builds:
  - id: quikgit
    main: ./cmd/quikgit
    binary: quikgit
    
    # Build flags
    flags:
      - -trimpath
    ldflags:
      - -s -w
      - -X main.version={{.Version}}
      - -X main.commit={{.Commit}}
      - -X main.date={{.Date}}
      - -X main.builtBy=goreleaser
    
    # Target platforms (same as existing build.sh and Makefile)
    goos:
      - linux
      - darwin
      - windows
    
    goarch:
      - amd64
      - arm64
    
    # Environment variables for each build
    env:
      - CGO_ENABLED=0

# Archive configuration
archives:
  - id: quikgit-archive
    # Archive name template
    name_template: "{{ .ProjectName }}-{{ .Version }}-{{ .Os }}-{{ .Arch }}"
    
    # Files to include in archives
    files:
      - LICENSE
      - README.md
      - AUTHENTICATION_SETUP.md
    
    # Archive format based on OS
    format: tar.gz
    format_overrides:
      - goos: windows
        format: zip
    
    wrap_in_directory: true

# Checksums
checksum:
  name_template: "checksums.sha256"
  algorithm: sha256

# Snapshots (for development builds)
snapshot:
  version_template: "{{ incpatch .Version }}-next"

# Changelog
changelog:
  sort: asc
  use: github
  filters:
    exclude:
      - "^docs:"
      - "^test:"
      - "^chore:"
      - "merge conflict"
      - Merge pull request
      - Merge remote-tracking branch
      - Merge branch
  groups:
    - title: "New Features"
      regexp: '^.*?feat(\([[:word:]]+\))??!?:.+$'
      order: 0
    - title: "Bug fixes"
      regexp: '^.*?fix(\([[:word:]]+\))??!?:.+$'
      order: 1
    - title: "Performance improvements"
      regexp: '^.*?perf(\([[:word:]]+\))??!?:.+$'
      order: 2
    - title: "Refactors"
      regexp: '^.*?refactor(\([[:word:]]+\))??!?:.+$'
      order: 3
    - title: "Documentation"
      regexp: '^.*?docs(\([[:word:]]+\))??!?:.+$'
      order: 4
    - title: "Other work"
      order: 999

# Release configuration
release:
  github:
    owner: lvcasx1
    name: quikgit
  
  # Release name template
  name_template: "QuikGit v{{ .Version }}"
  
  # Release notes
  header: |
    ## QuikGit v{{ .Version }}
    
    A GitHub repository manager with terminal user interface (TUI) for cloning, searching, and managing repositories.
    
    ### Installation
    
    #### macOS (Homebrew)
    ```bash
    brew tap lvcasx1/tap
    brew install quikgit
    ```
    
    #### Arch Linux (AUR)  
    ```bash
    yay -S quikgit
    ```
    
    #### Manual Installation
    Download the appropriate binary for your platform from the release assets below.
  
  footer: |
    ## Usage
    ```bash
    quikgit --help
    ```
    
    ## Supported Languages & Frameworks
    - Go, Node.js, Python, Ruby, Rust
    - Java, C++, C#, Swift, PHP, Dart
    - And more with automatic dependency detection!
    
    **Full Changelog**: https://github.com/lvcasx1/quikgit/compare/{{ .PreviousTag }}...{{ .Tag }}

# Homebrew formula
brews:
  - name: quikgit
    repository:
      owner: lvcasx1
      name: homebrew-tap
    
    # Use specific archive ID for Homebrew
    ids:
      - quikgit-archive
    
    # Homebrew formula metadata
    description: "GitHub repository manager with terminal user interface"
    homepage: "https://github.com/lvcasx1/quikgit"
    license: "MIT"
    
    # Dependencies
    dependencies:
      - name: git
        type: required
    
    # Installation
    install: |
      bin.install "quikgit"
    
    # Test
    test: |
      system "#{bin}/quikgit", "--version"

# Linux package management (DEB, RPM, AUR)
nfpms:
  - id: quikgit-packages
    package_name: quikgit
    vendor: lvcasx1
    homepage: https://github.com/lvcasx1/quikgit
    maintainer: lvcasx1 <noreply@github.com>
    description: "GitHub repository manager with terminal user interface"
    license: MIT
    
    # Package formats
    formats:
      - deb    # For Debian/Ubuntu (APT)
      - rpm    # For RHEL/Fedora/SUSE
    
    # Dependencies
    dependencies:
      - git
    
    # Package metadata
    section: utils
    priority: optional
    
    # File mappings
    # Note: GoReleaser automatically includes the main binary
    # We only need to specify additional files
    contents:
      # Include documentation
      - src: "LICENSE"
        dst: "/usr/share/doc/{{ .ProjectName }}/LICENSE"
      - src: "README.md"
        dst: "/usr/share/doc/{{ .ProjectName }}/README.md"
      - src: "AUTHENTICATION_SETUP.md"
        dst: "/usr/share/doc/{{ .ProjectName }}/AUTHENTICATION_SETUP.md"
    
    # Scripts (optional)
    scripts:
      postinstall: "scripts/postinstall.sh"
      postremove: "scripts/postremove.sh"

# AUR Publishing (Arch User Repository)
aurs:
  - name: quikgit
    homepage: https://github.com/lvcasx1/quikgit
    description: "GitHub repository manager with terminal user interface"
    maintainers:
      - 'lvcasx1 <noreply@github.com>'
    license: MIT
    private_key: '{{ .Env.AUR_SSH_PRIVATE_KEY }}'
    git_url: 'ssh://aur@aur.archlinux.org/quikgit.git'
    depends:
      - git
    package: |-
      # bin
      install -Dm755 "./quikgit" "${pkgdir}/usr/bin/quikgit"
      # license
      install -Dm644 "./LICENSE" "${pkgdir}/usr/share/licenses/quikgit/LICENSE"
      # docs
      install -Dm644 "./README.md" "${pkgdir}/usr/share/doc/quikgit/README.md"

# Custom publishers for APT repository
publishers:
  - name: aptly-repo
    # This publishes .deb packages to your own APT repository
    ids:
      - quikgit-packages
    dir: "{{ dir .ArtifactPath }}"
    cmd: |
      # Upload DEB packages to your APT repository
      # You'll need to set up your own APT repo infrastructure
      echo "Publishing DEB packages to APT repository..."
      # Example: aptly repo add quikgit {{ .ArtifactName }}
      # Example: aptly publish update stable
    env:
      - APT_REPO_URL={{ .Env.APT_REPO_URL }}
      - APT_REPO_KEY={{ .Env.APT_REPO_KEY }}

# Universal binaries for macOS (combines amd64 and arm64)
universal_binaries:
  - id: quikgit-universal
    replace: false
    name_template: "{{ .ProjectName }}"

# Docker images
dockers:
  - image_templates:
      - "ghcr.io/lvcasx1/{{ .ProjectName }}:{{ .Version }}-amd64"
      - "ghcr.io/lvcasx1/{{ .ProjectName }}:latest-amd64"
    dockerfile: Dockerfile
    use: buildx
    build_flag_templates:
      - "--pull"
      - "--label=org.opencontainers.image.created={{ .Date }}"
      - "--label=org.opencontainers.image.title={{ .ProjectName }}"
      - "--label=org.opencontainers.image.revision={{ .FullCommit }}"
      - "--label=org.opencontainers.image.version={{ .Version }}"
      - "--label=org.opencontainers.image.source=https://github.com/lvcasx1/quikgit"
      - "--platform=linux/amd64"
    
  - image_templates:
      - "ghcr.io/lvcasx1/{{ .ProjectName }}:{{ .Version }}-arm64"
      - "ghcr.io/lvcasx1/{{ .ProjectName }}:latest-arm64"
    dockerfile: Dockerfile
    use: buildx
    build_flag_templates:
      - "--pull"
      - "--label=org.opencontainers.image.created={{ .Date }}"
      - "--label=org.opencontainers.image.title={{ .ProjectName }}"
      - "--label=org.opencontainers.image.revision={{ .FullCommit }}"
      - "--label=org.opencontainers.image.version={{ .Version }}"
      - "--label=org.opencontainers.image.source=https://github.com/lvcasx1/quikgit"
      - "--platform=linux/arm64"
    goarch: arm64

# Docker manifests (multi-arch images)
docker_manifests:
  - name_template: "ghcr.io/lvcasx1/{{ .ProjectName }}:{{ .Version }}"
    image_templates:
      - "ghcr.io/lvcasx1/{{ .ProjectName }}:{{ .Version }}-amd64"
      - "ghcr.io/lvcasx1/{{ .ProjectName }}:{{ .Version }}-arm64"
  
  - name_template: "ghcr.io/lvcasx1/{{ .ProjectName }}:latest"
    image_templates:
      - "ghcr.io/lvcasx1/{{ .ProjectName }}:latest-amd64"
      - "ghcr.io/lvcasx1/{{ .ProjectName }}:latest-arm64"

# Sign artifacts with cosign (optional - uncomment if using cosign)
# signs:
#   - cmd: cosign
#     signature: "${artifact}.sig"
#     certificate: "${artifact}.pem"
#     args:
#       - "sign-blob"
#       - "--output-signature=${signature}"
#       - "--output-certificate=${certificate}"
#       - "${artifact}"
#       - "--yes"
#     artifacts: all